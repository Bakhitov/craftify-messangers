#!/bin/bash

echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ WWEB-MCP"
echo "=========================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_status() {
    if [ "$2" = "success" ]; then
        echo -e "\033[32m‚úÖ $1\033[0m"
    elif [ "$2" = "warning" ]; then
        echo -e "\033[33m‚ö†Ô∏è $1\033[0m"
    elif [ "$2" = "error" ]; then
        echo -e "\033[31m‚ùå $1\033[0m"
    else
        echo -e "‚ÑπÔ∏è $1"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo -e "\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker:"
if ! command -v docker &> /dev/null; then
    print_status "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "error"
    exit 1
fi
print_status "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "success"

if ! docker info &> /dev/null; then
    print_status "Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω" "error"
    exit 1
fi
print_status "Docker daemon —Ä–∞–±–æ—Ç–∞–µ—Ç" "success"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose
if ! command -v docker-compose &> /dev/null; then
    print_status "docker-compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "warning"
else
    print_status "docker-compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "success"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
echo -e "\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ç–∏:"
if docker network ls | grep -q "wweb-network"; then
    print_status "–°–µ—Ç—å wweb-network —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "success"
else
    print_status "–°–µ—Ç—å wweb-network –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "warning"
    echo "   –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏..."
    docker network create --driver bridge --subnet=172.20.0.0/16 wweb-network
    print_status "–°–µ—Ç—å wweb-network —Å–æ–∑–¥–∞–Ω–∞" "success"
fi

# –ü–æ–∏—Å–∫ WWEB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "\nüîç –ü–æ–∏—Å–∫ WWEB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
containers=$(docker ps -a --filter "label=wweb.instance.id" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}")

if [ -z "$containers" ] || [ "$containers" = "NAMES	STATUS	PORTS" ]; then
    print_status "WWEB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "warning"
    echo "   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ API"
else
    echo "$containers"
fi

# –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
echo -e "\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö:"
for container in $(docker ps -a --filter "label=wweb.instance.id" --format "{{.Names}}"); do
    echo -e "\nüìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container"
    
    # –°—Ç–∞—Ç—É—Å
    status=$(docker inspect "$container" --format "{{.State.Status}}")
    if [ "$status" = "running" ]; then
        print_status "–°—Ç–∞—Ç—É—Å: $status" "success"
    else
        print_status "–°—Ç–∞—Ç—É—Å: $status" "error"
    fi
    
    # –ü–æ—Ä—Ç—ã
    ports=$(docker inspect "$container" --format "{{range \$p, \$conf := .NetworkSettings.Ports}}{{if \$conf}}{{\$p}} -> {{(index \$conf 0).HostPort}} {{end}}{{end}}")
    if [ -n "$ports" ]; then
        echo "   –ü–æ—Ä—Ç—ã: $ports"
    else
        echo "   –ü–æ—Ä—Ç—ã: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    api_port=$(docker inspect "$container" --format "{{range \$p, \$conf := .NetworkSettings.Ports}}{{if \$conf}}{{(index \$conf 0).HostPort}}{{end}}{{end}}" | head -1)
    if [ -n "$api_port" ]; then
        if curl -s "http://localhost:$api_port/api/v1/health" > /dev/null 2>&1; then
            print_status "API –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $api_port" "success"
        elif curl -s "http://localhost:$api_port/api/v1/telegram/health" > /dev/null 2>&1; then
            print_status "Telegram API –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $api_port" "success"
        else
            print_status "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $api_port" "error"
        fi
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    if [ "$status" = "running" ]; then
        echo "   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (10 —Å—Ç—Ä–æ–∫):"
        docker logs --tail 10 "$container" 2>&1 | sed 's/^/      /'
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ compose
echo -e "\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Compose —Ñ–∞–π–ª–æ–≤:"
compose_files=$(find composes/ -name "docker-compose-*.yml" 2>/dev/null | wc -l)
if [ "$compose_files" -gt 0 ]; then
    print_status "–ù–∞–π–¥–µ–Ω–æ $compose_files compose —Ñ–∞–π–ª–æ–≤" "success"
    ls -la composes/docker-compose-*.yml 2>/dev/null | head -5
else
    print_status "Compose —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "warning"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo -e "\nüö™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤:"
echo "   –ü–æ—Ä—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 3001-3010:"
for port in {3001..3010}; do
    if ss -ln | grep -q ":$port "; then
        echo "      $port - –∑–∞–Ω—è—Ç"
    fi
done

echo -e "\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ Instance Manager:"
if curl -s "http://localhost:3000/health" > /dev/null 2>&1; then
    print_status "Instance Manager —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000" "success"
else
    print_status "Instance Manager –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000" "error"
fi

echo -e "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
echo "   1. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Instance Manager"
echo "   2. –ï—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo "   3. –ï—Å–ª–∏ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã - –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –∏—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
echo "   4. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: docker logs <container_name>"
echo "   5. –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: docker restart <container_name>"

echo -e "\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" 