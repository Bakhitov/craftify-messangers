#!/bin/bash
set -e

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º development –æ–∫—Ä—É–∂–µ–Ω–∏–µ
export NODE_ENV=development

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
get_external_ip() {
    local ip=""
    
    # –î–ª—è development –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –≠—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–ø—É—Å–∫ –∏ –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é
    if [[ "${NODE_ENV:-development}" == "development" ]]; then
        echo "localhost"
        return 0
    fi
    
    # –î–ª—è production –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP
    # –ü—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–µ IPv4 —Å–µ—Ä–≤–∏—Å—ã
    for service in "ipv4.icanhazip.com" "api.ipify.org" "checkip.amazonaws.com"; do
        ip=$(timeout 3 curl -s --connect-timeout 2 --max-time 3 "http://$service" 2>/dev/null | tr -d '\n\r' | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$')
        if [[ -n "$ip" ]]; then
            echo "$ip"
            return 0
        fi
    done
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
    echo "localhost"
    return 1
}

echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ DEVELOPMENT –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Docker —Å Supabase Cloud${NC}"
echo "================================================="

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å
echo -e "${YELLOW}üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞...${NC}"
EXTERNAL_IP=$(get_external_ip)

if [[ "$EXTERNAL_IP" == "localhost" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localhost.${NC}"
    echo -e "${YELLOW}üí° Instance Manager –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ${NC}"
else
    echo -e "${GREEN}‚úÖ –í–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å: $EXTERNAL_IP${NC}"
    echo -e "${GREEN}üí° Instance Manager –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$EXTERNAL_IP:3000${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
echo -e "${YELLOW}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! docker ps > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω.${NC}"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "–î–ª—è macOS –∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏–ª–∏ Colima:"
        echo "  colima start"
    else
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker:"
        echo "  sudo systemctl start docker"
    fi
    exit 1
fi
echo -e "${GREEN}‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! docker-compose --version > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker Compose –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo -e "${YELLOW}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"

if [ ! -f "env.development" ]; then
    echo -e "${RED}‚ùå –§–∞–π–ª env.development –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª env.development –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ ./install.sh"
    exit 1
fi

# –ö–æ–ø–∏—Ä—É–µ–º dev –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
cp env.development .env
echo -e "${GREEN}‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ development –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è${NC}"

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º INSTANCE_MANAGER_BASE_URL —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤–Ω–µ—à–Ω–∏–º IP
if [[ "$EXTERNAL_IP" != "localhost" ]]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s|INSTANCE_MANAGER_BASE_URL=.*|INSTANCE_MANAGER_BASE_URL=http://$EXTERNAL_IP:3000|g" .env
        sed -i '' "s|CORS_ORIGIN=.*|CORS_ORIGIN=http://$EXTERNAL_IP:3000|g" .env
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º EXTERNAL_IP
        if grep -q "EXTERNAL_IP=" .env; then
            sed -i '' "s|EXTERNAL_IP=.*|EXTERNAL_IP=$EXTERNAL_IP|g" .env
        else
            echo "EXTERNAL_IP=$EXTERNAL_IP" >> .env
        fi
    else
        sed -i "s|INSTANCE_MANAGER_BASE_URL=.*|INSTANCE_MANAGER_BASE_URL=http://$EXTERNAL_IP:3000|g" .env
        sed -i "s|CORS_ORIGIN=.*|CORS_ORIGIN=http://$EXTERNAL_IP:3000|g" .env
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º EXTERNAL_IP
        if grep -q "EXTERNAL_IP=" .env; then
            sed -i "s|EXTERNAL_IP=.*|EXTERNAL_IP=$EXTERNAL_IP|g" .env
        else
            echo "EXTERNAL_IP=$EXTERNAL_IP" >> .env
        fi
    fi
    echo -e "${GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω INSTANCE_MANAGER_BASE_URL: http://$EXTERNAL_IP:3000${NC}"
    echo -e "${GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω CORS_ORIGIN: http://$EXTERNAL_IP:3000${NC}"
    echo -e "${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω EXTERNAL_IP: $EXTERNAL_IP (–¥–ª—è CORS —Å –ª—é–±—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏)${NC}"
else
    echo -e "${YELLOW}üí° INSTANCE_MANAGER_BASE_URL –∏ CORS_ORIGIN –æ—Å—Ç–∞—é—Ç—Å—è localhost (–≤–Ω–µ—à–Ω–∏–π IP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)${NC}"
fi

# –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ Docker socket –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (macOS)
if [[ "$OSTYPE" == "darwin"* ]]; then
    USER_HOME=$(eval echo ~$USER)
    if [ -f "$USER_HOME/.colima/default/docker.sock" ]; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s|DOCKER_SOCKET_PATH=.*|DOCKER_SOCKET_PATH=$USER_HOME/.colima/default/docker.sock|g" .env
        else
            sed -i "s|DOCKER_SOCKET_PATH=.*|DOCKER_SOCKET_PATH=$USER_HOME/.colima/default/docker.sock|g" .env
        fi
        echo -e "${GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ Docker socket –¥–ª—è Colima: $USER_HOME/.colima/default/docker.sock${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Colima socket –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Docker socket${NC}"
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "${YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
mkdir -p composes volumes logs
echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo -e "${YELLOW}üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase...${NC}"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
source .env

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase
if [ "$USE_SUPABASE" = "true" ] && [ -n "$DATABASE_URL" ]; then
    echo -e "${BLUE}üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase Cloud Database${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è placeholder –∑–Ω–∞—á–µ–Ω–∏—è
    if [[ "$DATABASE_URL" == *"YOUR_PASSWORD"* ]] || [[ "$DATABASE_URL" == *"YOUR_PROJECT"* ]] || [[ "$DATABASE_PASSWORD" == "YOUR_PASSWORD" ]]; then
        echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã placeholder –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!${NC}"
        echo "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –∑–∞–º–µ–Ω–∏—Ç–µ:"
        echo "  - YOUR_PASSWORD –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç Supabase"
        echo "  - YOUR_PROJECT –Ω–∞ ID –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase"
        echo "  - DATABASE_PASSWORD=YOUR_PASSWORD –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
        echo "DATABASE_URL=postgresql://postgres:your_real_password@db.abcdefghijklmnop.supabase.co:5432/postgres"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
    echo "  Host: $DATABASE_HOST"
    echo "  Database: $DATABASE_NAME"
    echo "  Schema: $DATABASE_SCHEMA"
    
else
    echo -e "${RED}‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!${NC}"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DATABASE_URL –∏ USE_SUPABASE –≤ env.development"
    exit 1
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
docker-compose -f docker-compose.instance-manager.yml down 2>/dev/null || true
docker-compose down 2>/dev/null || true

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ç–∏ –¥–ª—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
echo -e "${YELLOW}üåê –°–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–∏ –¥–ª—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤...${NC}"
if docker network ls | grep -q "wweb-network"; then
    echo -e "${BLUE}üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ wweb-network –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
    docker network rm wweb-network 2>/dev/null || true
    sleep 1
fi

echo -e "${BLUE}üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ wweb-network...${NC}"
if docker network create \
    --driver bridge \
    --subnet=172.21.0.0/16 \
    wweb-network 2>/dev/null; then
    echo -e "${GREEN}‚úÖ –°–µ—Ç—å wweb-network —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π${NC}"
else
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Å–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if docker network ls | grep -q "wweb-network"; then
        echo -e "${GREEN}‚úÖ –°–µ—Ç—å wweb-network —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å wweb-network${NC}"
        exit 1
    fi
fi

# –û–ø—Ü–∏—è: –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
echo -e "${YELLOW}üöÄ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ Instance Manager:${NC}"
echo "1. Docker (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å Colima socket)"
echo "2. –õ–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Ö–æ—Å—Ç–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è development)"
read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2) [2]: " LAUNCH_MODE
LAUNCH_MODE=${LAUNCH_MODE:-2}

if [ "$LAUNCH_MODE" = "1" ]; then
    echo -e "${YELLOW}üöÄ –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Instance Manager —á–µ—Ä–µ–∑ Docker Compose...${NC}"
    docker-compose -f docker-compose.instance-manager.yml up -d --build
else
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ Instance Manager –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Ö–æ—Å—Ç–µ...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –∏ pnpm
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
    
    if ! command -v pnpm &> /dev/null; then
        echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pnpm...${NC}"
        npm install -g pnpm
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Å–±–æ—Ä–∫–∞
    echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    pnpm install
    
    echo -e "${YELLOW}üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    pnpm run build
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
    docker-compose -f docker-compose.instance-manager.yml down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ –Ω–∞ —Ö–æ—Å—Ç–µ
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ Instance Manager –Ω–∞ —Ö–æ—Å—Ç–µ...${NC}"
    NODE_ENV=development node dist/main-instance-manager.js &
    INSTANCE_MANAGER_PID=$!
    echo "Instance Manager PID: $INSTANCE_MANAGER_PID"
    echo "$INSTANCE_MANAGER_PID" > .instance-manager.pid
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Instance Manager (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã)...${NC}"
echo -e "${BLUE}üí° Instance Manager –∏–º–µ–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞${NC}"

# –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 –º–∏–Ω—É—Ç—É –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
sleep 60

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Instance Manager...${NC}"
RETRY_COUNT=0
MAX_RETRIES=6

while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if curl -s http://localhost:3000/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Instance Manager –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!${NC}"
        break
    else
        RETRY_COUNT=$((RETRY_COUNT + 1))
        echo -e "${YELLOW}‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $RETRY_COUNT/$MAX_RETRIES...${NC}"
        sleep 5
    fi
done

if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
    echo -e "${RED}‚ùå Instance Manager –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $MAX_RETRIES –ø–æ–ø—ã—Ç–æ–∫${NC}"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs wweb-mcp-instance-manager-1 -f"
    echo "–ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker ps -a"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...${NC}"
HEALTH_RESPONSE=$(curl -s http://localhost:3000/health)
if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
    echo -e "${GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö${NC}"
    echo "–û—Ç–≤–µ—Ç health check: $HEALTH_RESPONSE"
fi

echo ""
echo -e "${GREEN}üéâ Development –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Docker!${NC}"
echo "================================================="
echo -e "${BLUE}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö:${NC}"
echo ""
echo -e "${GREEN}üåê URLs:${NC}"
echo "  Instance Manager (–ª–æ–∫–∞–ª—å–Ω—ã–π):  http://localhost:3000"
if [[ "$EXTERNAL_IP" != "localhost" ]]; then
    echo "  Instance Manager (–≤–Ω–µ—à–Ω–∏–π):    http://$EXTERNAL_IP:3000"
fi
echo "  Health Check:                  http://localhost:3000/health"
echo "  API Instances:                 http://localhost:3000/api/v1/instances"
echo "  Supabase Dashboard:            https://supabase.com/dashboard"
echo ""
if [[ "$EXTERNAL_IP" != "localhost" ]]; then
    echo -e "${GREEN}üåç –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø:${NC}"
    echo "  Instance Manager –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://$EXTERNAL_IP:3000"
    echo "  CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª—é–±—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–∞ IP: $EXTERNAL_IP"
    echo "  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins: http://$EXTERNAL_IP:*, https://$EXTERNAL_IP:*"
    echo "  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç 3000 –æ—Ç–∫—Ä—ã—Ç –≤ —Ñ–∞–π—Ä–≤–æ–ª–µ"
    echo ""
fi
echo -e "${GREEN}üîß Docker –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:${NC}"
echo "  –õ–æ–≥–∏ Instance Manager:    docker logs wweb-mcp-instance-manager-1 -f"
echo "  –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:       docker ps -a"
echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:              docker-compose -f docker-compose.instance-manager.yml restart"
echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:               docker-compose -f docker-compose.instance-manager.yml down"
echo "  –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞:              docker-compose -f docker-compose.instance-manager.yml up -d --build"
echo "  –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:    docker-compose up -d --build"
echo ""
echo "  –°–æ–∑–¥–∞—Ç—å WhatsApp –∏–Ω—Å—Ç–∞–Ω—Å:"
echo "    curl -X POST http://localhost:3000/api/v1/instances \\"
echo "      -H 'Content-Type: application/json' \\"
echo "      -d '{\"company_id\":\"test-user\",\"provider\":\"whatsappweb\",\"type_instance\":[\"api\"]}'"
echo ""
echo "  –°–æ–∑–¥–∞—Ç—å Telegram –∏–Ω—Å—Ç–∞–Ω—Å:"
echo "    curl -X POST http://localhost:3000/api/v1/instances \\"
echo "      -H 'Content-Type: application/json' \\"
echo "      -d '{\"company_id\":\"test-user\",\"provider\":\"telegram\",\"type_instance\":[\"api\"]}'"
echo ""
echo "  –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤:      curl http://localhost:3000/api/v1/instances"
echo "  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤:     curl http://localhost:3000/api/v1/resources/ports"
echo ""
echo -e "${GREEN}üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. üì± –°–æ–∑–¥–∞–π—Ç–µ WhatsApp –∏–ª–∏ Telegram –∏–Ω—Å—Ç–∞–Ω—Å —á–µ—Ä–µ–∑ API"
echo "2. üì≤ –î–ª—è WhatsApp: –ø–æ–ª—É—á–∏—Ç–µ QR –∫–æ–¥ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ"
echo "3. ü§ñ –î–ª—è Telegram: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TELEGRAM_BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
echo "4. üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
echo ""
echo -e "${YELLOW}üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:${NC}"
echo "  –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: README.md"
echo "  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: TESTING_GUIDE_NEW.md"
echo "  Supabase –º–∏–≥—Ä–∞—Ü–∏—è: SUPABASE_MIGRATION_COMPLETED.md"
echo ""
echo -e "${YELLOW}üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
echo "docker-compose -f docker-compose.instance-manager.yml down && docker-compose down" 