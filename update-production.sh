#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Craftify Messengers –Ω–∞ production

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Craftify Messengers..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "package.json" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π..."
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
if [ -d "volumes" ]; then
    cp -r volumes volumes.backup.$(date +%Y%m%d_%H%M%S)
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
if [ -f "docker-compose.production.yml" ]; then
    docker-compose -f docker-compose.production.yml down
else
    docker-compose down
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
echo "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ GitHub..."
git fetch origin
CURRENT_COMMIT=$(git rev-parse HEAD)
echo "–¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: $CURRENT_COMMIT"

git pull origin main
NEW_COMMIT=$(git rev-parse HEAD)
echo "–ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç: $NEW_COMMIT"

if [ "$CURRENT_COMMIT" = "$NEW_COMMIT" ]; then
    echo "‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, –Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å—ã..."
else
    echo "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if command -v pnpm &> /dev/null; then
    pnpm install
elif command -v npm &> /dev/null; then
    npm install
else
    echo "‚ùå npm –∏–ª–∏ pnpm –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    exit 1
fi

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å build —Å–∫—Ä–∏–ø—Ç)
echo "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
echo "Building project..."
pnpm run build

# –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
if [ -f "docker-compose.production.yml" ]; then
    docker-compose -f docker-compose.production.yml up -d --build
else
    docker-compose up -d --build
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
if [ -f "docker-compose.production.yml" ]; then
    docker-compose -f docker-compose.production.yml ps
else
    docker-compose ps
fi

# Health check
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint..."
if curl -f -s http://localhost:3000/health > /dev/null; then
    echo "‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
else
    echo "‚ö†Ô∏è Health check –Ω–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
    if [ -f "docker-compose.production.yml" ]; then
        docker-compose -f docker-compose.production.yml logs --tail=20
    else
        docker-compose logs --tail=20
    fi
fi

echo ""
echo "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   –õ–æ–≥–∏: docker-compose logs -f"
echo "   –°—Ç–∞—Ç—É—Å: docker-compose ps"
echo "   Health: curl http://localhost:3000/health"
echo ""
echo "üí° –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –º–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è:"
echo "   git checkout $CURRENT_COMMIT"
echo "   docker-compose up -d --build"

echo "‚úÖ Production update completed successfully!" 