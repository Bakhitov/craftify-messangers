import dotenv from 'dotenv';
import { createPool, getDatabaseConfig } from '../config/database.config';
import logger from '../logger';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

export async function testDatabaseConnection(): Promise<boolean> {
  const pool = createPool();

  try {
    logger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    const config = getDatabaseConfig();
    logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î:', {
      host: config.host,
      port: config.port,
      database: config.database,
      user: config.user,
      schema: config.schema,
      ssl: config.ssl,
      useSupabase: process.env.USE_SUPABASE === 'true',
      hasConnectionString: !!config.connectionString,
    });

    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const client = await pool.connect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
    const versionResult = await client.query('SELECT version()');
    logger.info('–í–µ—Ä—Å–∏—è PostgreSQL:', versionResult.rows[0].version);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É
    const schemaResult = await client.query('SELECT current_schema()');
    logger.info('–¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞:', schemaResult.rows[0].current_schema);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã
    const schemasResult = await client.query(`
      SELECT schema_name 
      FROM information_schema.schemata 
      WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
      ORDER BY schema_name
    `);
    logger.info(
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã:',
      schemasResult.rows.map(row => row.schema_name),
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ ai —Å—Ö–µ–º–µ
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'ai' 
      ORDER BY table_name
    `);
    logger.info(
      '–¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ ai:',
      tablesResult.rows.map(row => row.table_name),
    );

    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const testResult = await client.query('SELECT NOW() as current_time, 1 + 1 as test_calc');
    logger.info('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:', {
      currentTime: testResult.rows[0].current_time,
      testCalc: testResult.rows[0].test_calc,
    });

    client.release();

    logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    });
    return false;
  } finally {
    await pool.end();
  }
}

export async function createTablesIfNotExists(): Promise<boolean> {
  const pool = createPool();

  try {
    logger.info('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç...');

    const client = await pool.connect();

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É messages
    await client.query(`
      CREATE TABLE IF NOT EXISTS ai.messages (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        instance_id UUID NOT NULL,
        message_id VARCHAR(255) NOT NULL,
        chat_id VARCHAR(255) NOT NULL,
        from_number VARCHAR(50),
        to_number VARCHAR(50),
        message_body TEXT,
        message_type VARCHAR(50) DEFAULT 'text',
        is_from_me BOOLEAN DEFAULT FALSE,
        is_group BOOLEAN DEFAULT FALSE,
        group_id VARCHAR(255),
        contact_name VARCHAR(255),
        timestamp BIGINT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        
        UNIQUE(instance_id, message_id)
      );
    `);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_messages_instance_id ON ai.messages(instance_id);
      CREATE INDEX IF NOT EXISTS idx_messages_chat_id ON ai.messages(chat_id);
      CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON ai.messages(timestamp);
      CREATE INDEX IF NOT EXISTS idx_messages_from_number ON ai.messages(from_number);
      CREATE INDEX IF NOT EXISTS idx_messages_is_group ON ai.messages(is_group);
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É message_instances
    await client.query(`
      CREATE TABLE IF NOT EXISTS ai.message_instances (
        id UUID PRIMARY KEY,
        user_id VARCHAR NOT NULL,
        provider VARCHAR NOT NULL DEFAULT 'whatsappweb',
        type_instance VARCHAR[] NOT NULL DEFAULT ARRAY['api'],
        port_api INTEGER,
        port_mcp INTEGER,
        api_key VARCHAR,
        api_webhook_schema JSONB DEFAULT '{}',
        mcp_schema JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );
    `);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è message_instances
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_message_instances_user_id ON ai.message_instances(user_id);
      CREATE INDEX IF NOT EXISTS idx_message_instances_provider ON ai.message_instances(provider);
    `);

    client.release();

    logger.info('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    });
    return false;
  } finally {
    await pool.end();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export async function runDatabaseTests(): Promise<void> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  const connectionTest = await testDatabaseConnection();
  if (!connectionTest) {
    logger.error('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.');
    process.exit(1);
  }

  const tablesTest = await createTablesIfNotExists();
  if (!tablesTest) {
    logger.error('‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–≤–∞–ª–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.');
    process.exit(1);
  }

  logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runDatabaseTests().catch(error => {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î:', error);
    process.exit(1);
  });
}
