import express, { Application, Request, Response } from 'express';
import cors from 'cors';
import { DatabaseService } from './services/database.service';
import { DockerService } from './services/docker.service';
import logger from '../logger';
import { InstanceMonitorService } from './services/instance-monitor.service';
import { requestLogger, errorHandler } from '../middleware';
import { v1Router } from './api/v1';

const app: Application = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
  origin: function (
    origin: string | undefined,
    callback: (err: Error | null, allow?: boolean) => void,
  ): void {
    // –í development —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
    if (process.env.NODE_ENV === 'development') {
      callback(null, true);
      return;
    }

    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, Postman)
    if (!origin) {
      callback(null, true);
      return;
    }

    // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins
    const allowedOrigins = [
      'http://localhost',
      'http://127.0.0.1',
      'https://localhost',
      'https://127.0.0.1',
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º CORS_ORIGIN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (process.env.CORS_ORIGIN) {
      allowedOrigins.push(process.env.CORS_ORIGIN);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º INSTANCE_MANAGER_BASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (process.env.INSTANCE_MANAGER_BASE_URL) {
      allowedOrigins.push(process.env.INSTANCE_MANAGER_BASE_URL);
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const externalIP =
      process.env.EXTERNAL_IP || process.env.INSTANCE_MANAGER_BASE_URL?.match(/\/\/([^:]+)/)?.[1];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ origins
    const isExactMatch = allowedOrigins.some(allowedOrigin => origin === allowedOrigin);
    if (isExactMatch) {
      callback(null, true);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è localhost –∏ 127.0.0.1 —Å –ª—é–±—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
    const localhostPattern = /^https?:\/\/(localhost|127\.0\.0\.1)(:\d+)?$/;
    if (localhostPattern.test(origin)) {
      callback(null, true);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ IP —Å –ª—é–±—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏
    if (externalIP && externalIP !== 'localhost') {
      const externalIPPattern = new RegExp(
        `^https?://${externalIP.replace(/\./g, '\\.')}(:\\d+)?$`,
      );
      if (externalIPPattern.test(origin)) {
        callback(null, true);
        return;
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –±–ª–æ–∫–∏—Ä—É–µ–º
    logger.warn(`CORS blocked request from origin: ${origin}`);
    callback(new Error('Not allowed by CORS'), false);
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposedHeaders: ['X-RateLimit-Limit', 'X-RateLimit-Remaining', 'X-RateLimit-Reset'],
};

// –°–µ—Ä–≤–∏—Å—ã
const databaseService = new DatabaseService();
const dockerService = new DockerService();
const instanceMonitorService = new InstanceMonitorService(dockerService, databaseService);

// Middleware
app.use(cors(corsOptions));
app.use(express.json());
app.use(requestLogger);

// API Routes
app.use('/api/v1', v1Router);

// Routes
app.get('/health', (_req: Request, res: Response) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: 'development',
    hotReload: 'active',
    version: '0.2.6-dev-hotreload-test',
  });
});

// Error handling
app.use(errorHandler);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
async function main(): Promise<void> {
  try {
    logger.info('üöÄ Starting Instance Manager...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await databaseService.initialize();
    logger.info('‚úÖ Database initialized');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    let dockerAvailable = false;
    try {
      dockerAvailable = await dockerService.checkConnection();
      if (!dockerAvailable) {
        throw new Error('Docker is not available');
      }
      logger.info('‚úÖ Docker connection verified');
    } catch (error: unknown) {
      logger.error('Docker connection failed:', error);

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ Docker
      if (process.env.NODE_ENV === 'development') {
        logger.warn(
          '‚ö†Ô∏è  Running in development mode without Docker - some features will be disabled',
        );
        dockerAvailable = false;
      } else {
        logger.error('‚ùå Docker is required in production mode');
        process.exit(1);
      }
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω
    let statusUpdateInterval: NodeJS.Timeout | null = null;
    if (dockerAvailable) {
      const updateInterval = 60000; // 60 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
      statusUpdateInterval = await instanceMonitorService.startStatusUpdateInterval(updateInterval);
      logger.info(`‚úÖ Auth status update service started (interval: ${updateInterval}ms)`);
    } else {
      logger.warn('‚ö†Ô∏è  Instance monitoring disabled - Docker not available');
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      logger.info(`üåê Instance Manager API running on port ${PORT}`);
      if (!dockerAvailable) {
        logger.warn('‚ö†Ô∏è  Docker features disabled - running in limited mode');
      }
    });

    // Graceful shutdown
    process.on('SIGINT', async () => {
      logger.info('üõë Shutting down Instance Manager...');
      if (statusUpdateInterval) {
        clearInterval(statusUpdateInterval);
      }
      await databaseService.close();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      logger.info('üõë Shutting down Instance Manager...');
      if (statusUpdateInterval) {
        clearInterval(statusUpdateInterval);
      }
      await databaseService.close();
      process.exit(0);
    });
  } catch (error: unknown) {
    logger.error('‚ùå Failed to start Instance Manager:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main();
