#!/bin/bash
set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É wweb-mcp..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
if ! command -v node &> /dev/null; then
    error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤–µ—Ä—Å–∏–∏ 18 –∏–ª–∏ –≤—ã—à–µ."
fi

NODE_VERSION=$(node -v | sed 's/v//')
REQUIRED_VERSION="18.0.0"
if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$NODE_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]; then
    error "–¢—Ä–µ–±—É–µ—Ç—Å—è Node.js –≤–µ—Ä—Å–∏–∏ $REQUIRED_VERSION –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $NODE_VERSION"
fi

log "‚úÖ Node.js –≤–µ—Ä—Å–∏–∏ $NODE_VERSION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm
if ! command -v pnpm &> /dev/null; then
    error "pnpm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

log "‚úÖ pnpm –¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    warn "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
else
    log "‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js..."
if [ -f "pnpm-lock.yaml" ]; then
    pnpm install --frozen-lockfile
else
    pnpm install
fi

log "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
log "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
pnpm run build

log "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p .wwebjs_auth
mkdir -p logs
mkdir -p volumes
mkdir -p composes

log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
if [ ! -f ".env" ]; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞..."
    cat > .env << EOF
# ===========================================
# DEVELOPMENT –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===========================================

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
NODE_ENV=development
LOG_LEVEL=debug

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (Supabase Cloud)
DATABASE_URL=postgresql://postgres:YOUR_PASSWORD@db.YOUR_PROJECT.supabase.co:5432/postgres
DATABASE_HOST=db.YOUR_PROJECT.supabase.co
DATABASE_PORT=5432
DATABASE_NAME=postgres
DATABASE_USER=postgres
DATABASE_PASSWORD=YOUR_PASSWORD
DATABASE_SCHEMA=public
DATABASE_SSL=true
USE_SUPABASE=true

# Instance Manager
INSTANCE_MANAGER_PORT=3000
INSTANCE_MANAGER_BASE_URL=http://localhost:3000

# Docker –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DOCKER_SOCKET_PATH=/var/run/docker.sock

# –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
BASE_PORT_RANGE_START=3001
BASE_PORT_RANGE_END=7999
TELEGRAM_BASE_PORT_RANGE_START=4001
TELEGRAM_BASE_PORT_RANGE_END=8999

# –ü—É—Ç–∏
COMPOSE_FILES_PATH=./composes
VOLUMES_PATH=./volumes

# WhatsApp –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WHATSAPP_AUTH_STRATEGY=local
WHATSAPP_MAX_CONNECTIONS=5

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN=YOUR_BOT_TOKEN_HERE
TELEGRAM_ENABLED=false

# AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (Agno Agent System)
AGNO_API_BASE_URL=http://host.docker.internal:8000
AGNO_API_TIMEOUT=10000
AGNO_ENABLED=false

# Development —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DOCKER_CONTAINER=true
PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
EOF
    warn "–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ:"
    echo "  1. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PASSWORD –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç Supabase"
    echo "  2. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PROJECT –Ω–∞ ID –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase"
    echo "  3. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–æ–º..."
if pnpm run lint; then
    log "‚úÖ –ö–æ–¥ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–Ω—Ç–µ—Ä–∞"
else
    warn "–ö–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–Ω—Ç–µ—Ä–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'pnpm run lint:fix' –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
if command -v docker &> /dev/null; then
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –¥–ª—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
    docker build -t wweb-mcp:latest .
    log "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Docker –æ–±—Ä–∞–∑ wweb-mcp:latest —Å–æ–±—Ä–∞–Ω"
    
    # –°–±–æ—Ä–∫–∞ Instance Manager –æ–±—Ä–∞–∑–∞
    docker build -f Dockerfile.instance-manager -t wweb-mcp-instance-manager:latest .
    log "‚úÖ Instance Manager Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
REQUIRED_FILES=(
    "dist/main.js"
    "dist/main-instance-manager.js"
    "package.json"
    ".env"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª: $file"
    fi
done

log "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker context –¥–ª—è macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    DOCKER_CONTEXT=$(docker context show 2>/dev/null || echo "unknown")
    if [[ "$DOCKER_CONTEXT" == "colima" ]]; then
        warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω macOS + Colima"
        warn "Colima –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Docker socket –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        warn "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ Instance Manager –Ω–∞ —Ö–æ—Å—Ç–µ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
        echo ""
        echo -e "${YELLOW}üí° –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ./start-dev.sh –≤—ã–±–µ—Ä–∏—Ç–µ 'y' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Ö–æ—Å—Ç–µ${NC}"
    fi
fi

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
echo ""
echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""
echo -e "${GREEN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo ""
echo -e "${YELLOW}Development –æ–∫—Ä—É–∂–µ–Ω–∏–µ:${NC}"
echo "  ./start-dev.sh                           # –ó–∞–ø—É—Å–∫ development –æ–∫—Ä—É–∂–µ–Ω–∏—è"
if [[ "$OSTYPE" == "darwin"* ]] && [[ "$(docker context show 2>/dev/null)" == "colima" ]]; then
    echo "  ‚ö†Ô∏è  –ù–∞ macOS + Colima —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ Instance Manager –Ω–∞ —Ö–æ—Å—Ç–µ"
    echo "  üí° –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—ã–±–µ—Ä–∏—Ç–µ 'y' –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
else
    echo "  docker-compose -f docker-compose.instance-manager.yml up -d"
fi
echo ""
echo -e "${YELLOW}Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ:${NC}"
echo "  ./start-prod.sh                          # –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo ""
echo -e "${YELLOW}–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:${NC}"
echo "  pnpm run dev                              # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
echo "  pnpm run dev:instance-manager             # Instance Manager –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
echo "  pnpm test                                 # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
echo "  pnpm run lint                             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
echo ""
echo -e "${YELLOW}–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ Instance Manager (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞):${NC}"
echo "  node dist/main-instance-manager.js       # –ó–∞–ø—É—Å–∫ –Ω–∞ —Ö–æ—Å—Ç–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è macOS + Colima)"
echo "  nohup node dist/main-instance-manager.js > instance-manager.log 2>&1 &  # Background —Ä–µ–∂–∏–º"
echo ""
echo -e "${GREEN}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. üîß –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Supabase:"
echo "   - DATABASE_URL: —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"
echo "   - DATABASE_PASSWORD: –ø–∞—Ä–æ–ª—å –æ—Ç Supabase"
echo "   - –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PROJECT –Ω–∞ ID –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"
echo ""
echo "2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ development –æ–∫—Ä—É–∂–µ–Ω–∏–µ:"
echo "   ./start-dev.sh"
if [[ "$OSTYPE" == "darwin"* ]] && [[ "$(docker context show 2>/dev/null)" == "colima" ]]; then
    echo "   üí° –í—ã–±–µ—Ä–∏—Ç–µ 'y' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Instance Manager –Ω–∞ —Ö–æ—Å—Ç–µ"
fi
echo ""
echo "3. üì± –î–ª—è Telegram API –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env"
echo ""
echo -e "${BLUE}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC}"
echo "  README.md                - –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
echo "  TESTING_GUIDE_NEW.md     - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
echo "  SUPABASE_MIGRATION_COMPLETED.md - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Supabase"
echo ""
echo -e "${YELLOW}üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:${NC}"
echo "  Supabase Dashboard: https://supabase.com/dashboard"
echo "  Instance Manager API: http://localhost:3000 (–ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞)"
echo ""
if [[ "$OSTYPE" == "darwin"* ]] && [[ "$(docker context show 2>/dev/null)" == "colima" ]]; then
    echo -e "${YELLOW}üçé –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è macOS + Colima:${NC}"
    echo "  ‚Ä¢ Instance Manager –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ö–æ—Å—Ç–µ (–Ω–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ)"
    echo "  ‚Ä¢ –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Docker socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"
    echo "  ‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Docker Desktop"
    echo "    docker context use desktop-linux"
    echo ""
fi 