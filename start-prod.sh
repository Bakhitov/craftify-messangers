#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ PRODUCTION –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å Supabase Cloud${NC}"
echo "================================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
echo -e "${YELLOW}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! docker ps > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker:${NC}"
    echo "sudo systemctl start docker"
    echo "sudo systemctl enable docker"
    exit 1
fi
echo -e "${GREEN}‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Node.js $(node -v) –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤ –¥–ª—è production
if [ "$EUID" -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ root. –í production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.${NC}"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo -e "${YELLOW}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"

if [ ! -f "env.production" ]; then
    echo -e "${RED}‚ùå –§–∞–π–ª env.production –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª env.production –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ ./install.sh"
    exit 1
fi

# –ö–æ–ø–∏—Ä—É–µ–º prod –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
cp env.production .env
echo -e "${GREEN}‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è${NC}"

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
echo -e "${YELLOW}üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ security –Ω–∞—Å—Ç—Ä–æ–µ–∫...${NC}"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
source .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ "$USE_SUPABASE" = "true" ] && [ -n "$DATABASE_URL" ]; then
    echo -e "${BLUE}üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase Cloud Database${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è placeholder –∑–Ω–∞—á–µ–Ω–∏—è
    if [[ "$DATABASE_URL" == *"YOUR_PASSWORD"* ]] || [[ "$DATABASE_URL" == *"YOUR_PROJECT"* ]]; then
        echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã placeholder –∑–Ω–∞—á–µ–Ω–∏—è –≤ DATABASE_URL!${NC}"
        echo "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ env.production –∏ –∑–∞–º–µ–Ω–∏—Ç–µ:"
        echo "  - YOUR_PASSWORD –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç Supabase"
        echo "  - YOUR_PROJECT –Ω–∞ ID –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
    echo "  Host: $DATABASE_HOST"
    echo "  Database: $DATABASE_NAME"
    echo "  Schema: $DATABASE_SCHEMA"
    
else
    echo -e "${RED}‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!${NC}"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DATABASE_URL –∏ USE_SUPABASE –≤ env.production"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤
if [[ "$INSTANCE_MANAGER_BASE_URL" == *"your-domain.com"* ]] || [[ "$INSTANCE_MANAGER_BASE_URL" == *"localhost"* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã placeholder –∏–ª–∏ localhost –¥–æ–º–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª–∏:${NC}"
    echo "- INSTANCE_MANAGER_BASE_URL"
    echo "- AGNO_API_BASE_URL"
fi

echo -e "${GREEN}‚úÖ Security –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã${NC}"

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
echo -e "${YELLOW}üîß –°–±–æ—Ä–∫–∞ production –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
pnpm install --prod
pnpm run build

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
echo -e "${YELLOW}üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...${NC}"
docker build -t wweb-mcp:latest .
echo -e "${GREEN}‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Docker –æ–±—Ä–∞–∑ wweb-mcp:latest —Å–æ–±—Ä–∞–Ω${NC}"

docker build -f Dockerfile.instance-manager -t wweb-mcp-instance-manager:latest .
echo -e "${GREEN}‚úÖ Instance Manager Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "${YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ production –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
mkdir -p composes volumes logs ssl
echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS)
if [ "$NODE_ENV" = "production" ] && [ "$ENABLE_HTTPS" = "true" ]; then
    echo -e "${YELLOW}üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...${NC}"
    if [ ! -f "ssl/fullchain.pem" ] || [ ! -f "ssl/privkey.pem" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–∏–µ self-signed —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...${NC}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        openssl req -x509 -newkey rsa:4096 -keyout ssl/privkey.pem -out ssl/fullchain.pem -days 365 -nodes \
            -subj "/C=RU/ST=Moscow/L=Moscow/O=WWEB-MCP/OU=IT/CN=localhost"
        
        echo -e "${YELLOW}‚ö†Ô∏è –°–æ–∑–¥–∞–Ω self-signed —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Let's Encrypt:${NC}"
        echo "sudo certbot certonly --nginx -d your-domain.com"
    else
        echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã${NC}"
    fi
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
docker-compose -f docker-compose.instance-manager.yml down 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤...${NC}"
docker system prune -f

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ Instance Manager –¥–ª—è production
DOCKER_CONTEXT=$(docker context show)
USE_HOST_MODE=false

if [[ "$OSTYPE" == "darwin"* ]] && [[ "$DOCKER_CONTEXT" == "colima" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω macOS + Colima –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è –î–ª—è production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Docker Desktop –∏–ª–∏ Linux —Å–µ—Ä–≤–µ—Ä${NC}"
    echo -e "${BLUE}üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∑–∞–ø—É—Å–∫ Instance Manager –Ω–∞ —Ö–æ—Å—Ç–µ${NC}"
    echo ""
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å Instance Manager –Ω–∞ —Ö–æ—Å—Ç–µ? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        USE_HOST_MODE=true
    fi
fi

# –ó–∞–ø—É—Å–∫ production Instance Manager
if [ "$USE_HOST_MODE" = true ]; then
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ production Instance Manager –Ω–∞ —Ö–æ—Å—Ç–µ...${NC}"
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    export $(grep -v '^#' .env | xargs)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    if lsof -i :3000 > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è –ü–æ—Ä—Ç 3000 –∑–∞–Ω—è—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...${NC}"
        pkill -f "main-instance-manager.js" || true
        sleep 2
    fi
    
    # –ó–∞–ø—É—Å–∫ –≤ background —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    echo -e "${BLUE}üîÑ –ó–∞–ø—É—Å–∫ Instance Manager –≤ production —Ä–µ–∂–∏–º–µ...${NC}"
    nohup node dist/main-instance-manager.js > instance-manager-prod.log 2>&1 &
    IM_PID=$!
    echo "Instance Manager –∑–∞–ø—É—â–µ–Ω (PID: $IM_PID)"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Instance Manager...${NC}"
    sleep 10
    
else
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ production Instance Manager –≤ Docker...${NC}"
    docker-compose -f docker-compose.instance-manager.yml up -d --build
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    sleep 20
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Instance Manager
echo -n "Instance Manager: "
RETRY_COUNT=0
MAX_RETRIES=6

while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if curl -s http://localhost:3000/health > /dev/null; then
        echo -e "${GREEN}‚úÖ –ó–∞–ø—É—â–µ–Ω${NC}"
        break
    else
        RETRY_COUNT=$((RETRY_COUNT + 1))
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs wweb-mcp-instance-manager-1 -f"
        else
            echo -n "."
            sleep 3
        fi
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...${NC}"
HEALTH_RESPONSE=$(curl -s http://localhost:3000/health 2>/dev/null || echo "error")
if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
    echo -e "${GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö${NC}"
    echo "–û—Ç–≤–µ—Ç health check: $HEALTH_RESPONSE"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
echo -e "${YELLOW}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...${NC}"
if curl -s http://localhost:3000/health > /dev/null; then
    echo -e "${GREEN}‚úÖ HTTP API –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
else
    echo -e "${RED}‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!${NC}"
echo "================================================="
echo -e "${BLUE}üìã Production –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
echo ""
echo -e "${GREEN}üåê URLs:${NC}"
echo "  Instance Manager API:  http://localhost:3000"
echo "  Health Check:          http://localhost:3000/health"
echo "  API Instances:         http://localhost:3000/api/v1/instances"
echo "  Supabase Dashboard:    https://supabase.com/dashboard"
echo ""
echo -e "${GREEN}üîß –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:${NC}"
echo "  –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:     docker ps | grep wweb-mcp-instance-manager"
if [ "$USE_HOST_MODE" = true ]; then
    echo "  –õ–æ–≥–∏ Instance Manager: tail -f instance-manager-prod.log"
    echo "  –ü—Ä–æ—Ü–µ—Å—Å Instance Manager: ps aux | grep main-instance-manager.js"
else
    echo "  –õ–æ–≥–∏ Instance Manager: docker logs wweb-mcp-instance-manager-1 -f"
fi
echo "  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:   docker stats wweb-mcp-instance-manager-1"
echo "  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:     curl http://localhost:3000/health"
echo ""
echo -e "${GREEN}üõë –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
if [ "$USE_HOST_MODE" = true ]; then
    echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:             pkill -f main-instance-manager.js"
    echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:            pkill -f main-instance-manager.js && nohup node dist/main-instance-manager.js > instance-manager-prod.log 2>&1 &"
    echo "  –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:        tail -f instance-manager-prod.log"
    echo "  –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞:       ps aux | grep main-instance-manager.js"
else
    echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:            docker-compose -f docker-compose.instance-manager.yml restart"
    echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:             docker-compose -f docker-compose.instance-manager.yml down"
    echo "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:            git pull && docker-compose -f docker-compose.instance-manager.yml up -d --build"
    echo "  –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:        docker-compose -f docker-compose.instance-manager.yml logs -f"
fi
echo ""
echo -e "${GREEN}üìä API –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo "  –°–æ–∑–¥–∞—Ç—å WhatsApp –∏–Ω—Å—Ç–∞–Ω—Å:"
echo "    curl -X POST http://localhost:3000/api/v1/instances \\"
echo "      -H 'Content-Type: application/json' \\"
echo "      -d '{\"user_id\":\"prod-user\",\"provider\":\"whatsappweb\",\"type_instance\":[\"api\"]}'"
echo ""
echo "  –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤:      curl http://localhost:3000/api/v1/instances"
echo "  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤:     curl http://localhost:3000/api/v1/resources/ports"
echo ""
echo -e "${YELLOW}üí° –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è production:${NC}"
echo "‚Ä¢ ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase Cloud Database (—É–ø—Ä–∞–≤–ª—è–µ–º–∞—è –ë–î)"
echo "‚Ä¢ üîÑ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ backup —á–µ—Ä–µ–∑ Supabase Dashboard"
echo "‚Ä¢ üîí –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è HTTPS"
echo "‚Ä¢ üìä –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã"
echo "‚Ä¢ üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–∑—ã"
echo "‚Ä¢ üåê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π reverse proxy (CloudFlare, Nginx)"
echo "‚Ä¢ üîê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ firewall –∏ –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–º"
echo ""
echo -e "${BLUE}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC}"
echo "  README.md                        - –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
echo "  TESTING_GUIDE_NEW.md             - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
echo "  SUPABASE_MIGRATION_COMPLETED.md  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Supabase" 